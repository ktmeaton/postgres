name: Test

# Workflow conditions
on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'
  release:
    types: [published]
  workflow_call:

env:
  GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

jobs:

  lint:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5

      - name: Setup Pre-Commit
        run: |
          pip install pre-commit==4.2.0
          pre-commit install --install-hooks

      - name: Run Pre-Commit
        run: |
          pre-commit run --all-files

  docker:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Run Setup
        run: |
          ./setup.sh

      - name: Start Container
        run: |
          docker compose up -d

      - name: Healthcheck
        uses: stringbean/docker-healthcheck-action@v3
        with:
          container: postgres
          wait-time: 50
          require-status: running
          require-healthy: true

      - name: Get Status
        uses: stringbean/docker-healthcheck-action@v3
        id: postgres-container
        with:
          container: postgres

      - name: Display Status
        run: echo "Container is ${{ steps.postgres-container.outputs.status  }}"

      - name: pgBackRest Test
        run: |
          docker exec -e PSQL_PAGER=cat -it postgres bash -c 'PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -c "select * from backup.log"'

      # - name: pgBackRest Test
      #   run: |
      #     docker exec -e PSQL_PAGER=cat -it postgres bash -c 'PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -c "select * from backup.log"'
      #     last_backup=$(docker exec -e PSQL_PAGER=cat -it postgres bash -c 'PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -Atq -c "select last_successful_backup from backup.get_backup_latest()"')
      #     last_backup=$(echo "$last_backup" | tr -d '\r')
      #     docker compose down
      #     find data/postgres/main -mindepth 1 -delete
      #     scripts/docker/pgbackrest.sh --stanza=main --target-action=promote --type=time --target="$last_backup" --target-timeline=current restore
      #     docker compose up -d
      #     docker exec -e PSQL_PAGER=cat -it postgres bash -c 'PGPASSWORD=$POSTGRES_PASSWORD psql -U postgres -c "\l"'
